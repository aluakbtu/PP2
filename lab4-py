Date tasks
1
from datetime import datetime, timedelta

current_date = datetime.today()
new_date = current_date - timedelta(days=5)

print("Current Date:", current_date.strftime("%Y-%m-%d"))
print("Date after 5 days:", new_date.strftime("%Y-%m-%d"))

ex2
from datetime import datetime, timedelta

today = datetime.today()
yesterday = today - timedelta(days=1)
tomorrow = today + timedelta(days=1)

print("Yesterday:", yesterday.strftime("%Y-%m-%d"))
print("Today:", today.strftime("%Y-%m-%d"))
print("Tomorrow:", tomorrow.strftime("%Y-%m-%d"))

ex3
from datetime import datetime

now = datetime.now()
now_without_microseconds = now.replace(microsecond=0)

print("with microseconds:", now)
print("without microseconds:", now_without_microseconds)

ex4
from datetime import datetime

date1 = datetime(2024, 2, 10, 14, 30, 0)  # Example date
date2 = datetime(2024, 2, 12, 18, 15, 0)  # Another example date

difference = (date2 - date1).total_seconds()

print(difference)

Generators
ex1
def square_generator(N):
    for i in range(N + 1):
        yield i ** 2

N = int(input())
for num in square_generator(N):
    print(num, end=" ")
print()

ex2
def even_generator(n):
    for i in range(0, n + 1, 2):
        yield i

n = int(input())
print(",".join(str(num) for num in even_generator(n)))

ex3
def divisible_by_3_and_4(n):
    for i in range(n + 1):
        if i % 3 == 0 and i % 4 == 0:
            yield i

n = int(input())
print(list(divisible_by_3_and_4(n)))

ex4
def squares(a, b):
    for i in range(a, b + 1):
        yield i ** 2

a = int(input("start number: "))
b = int(input("end number: "))

for square in squares(a, b):
    print(square)

ex5
def countdown(n):
    while n >= 0:
        yield n
        n -= 1

n = int(input())
for num in countdown(n):
    print(num, end=" ")
print()

Parse json
import json

with open("sample-data.json", "r") as file:
    data = json.load(file)

print("Interface Status")
print("=" * 80)
print(f"{'DN':<50} {'Description':<20} {'Speed':<7} {'MTU':<6}")
print("-" * 80)

for item in data.get("imdata", []):
    attributes = item.get("l1PhysIf", {}).get("attributes", {})
    dn = attributes.get("dn", "")
    description = attributes.get("descr", "")
    speed = attributes.get("speed", "inherit")
    mtu = attributes.get("mtu", "")

    print(f"{dn:<50} {description:<20} {speed:<7} {mtu:<6}")

Py math library tasks
ex1
import math

def degree_to_radian(degree):
    return degree * (math.pi / 180)

degree = float(input("degree: "))
radian = degree_to_radian(degree)
print(f"radian: {radian:.6f}")

ex2
def trapezoid_area(height, base1, base2):
    return 0.5 * (base1 + base2) * height

height = float(input("H "))
base1 = float(input("B1 "))
base2 = float(input("B 2"))

area = trapezoid_area(height, base1, base2)
print(f"area: {area}")

ex3
import math

def regular_polygon_area(n_sides, side_length):
    return (n_sides * side_length ** 2) / (4 * math.tan(math.pi / n_sides))

n_sides = int(input("sides: "))
side_length = float(input("length: "))

area = regular_polygon_area(n_sides, side_length)
print(f"area: {area:.2f}")

ex4
def parallelogram_area(base, height):
    return base * height

base = float(input("length: "))
height = float(input("height: "))

area = parallelogram_area(base, height)
print(f"area: {area}")
